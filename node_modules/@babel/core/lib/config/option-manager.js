"use strict";

exports.__esModule = true;
exports.default = manageOptions;

var context = _interopRequireWildcard(require("../index"));

var _plugin = _interopRequireDefault(require("./plugin"));

var _defaults = _interopRequireDefault(require("lodash/defaults"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _buildConfigChain = _interopRequireDefault(require("./build-config-chain"));

var _path = _interopRequireDefault(require("path"));

var _traverse = _interopRequireDefault(require("@babel/traverse"));

var _clone = _interopRequireDefault(require("lodash/clone"));

var _caching = require("./caching");

var _environment = require("./helpers/environment");

var _options = require("./options");

var _files = require("./loading/files");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var ALLOWED_PLUGIN_KEYS = new Set(["name", "manipulateOptions", "pre", "post", "visitor", "inherits"]);

function manageOptions(opts) {
  return new OptionManager().init(opts);
}

var OptionManager = function () {
  function OptionManager() {
    this.options = void 0;
    this.passes = void 0;
    this.options = {};
    this.passes = [[]];
  }

  var _proto = OptionManager.prototype;

  _proto.mergeOptions = function mergeOptions(config, pass) {
    var _this = this;

    var result = loadConfig(config);
    var plugins = result.plugins.map(function (descriptor) {
      return loadPluginDescriptor(descriptor);
    });
    var presets = result.presets.map(function (descriptor) {
      return loadPresetDescriptor(descriptor);
    });
    var passPerPreset = config.options.passPerPreset;
    pass = pass || this.passes[0];

    if (presets.length > 0) {
      var presetPasses = null;

      if (passPerPreset) {
        var _passes;

        presetPasses = presets.map(function () {
          return [];
        });

        (_passes = this.passes).splice.apply(_passes, [1, 0].concat(presetPasses));
      }

      presets.forEach(function (presetConfig, i) {
        _this.mergeOptions(presetConfig, presetPasses ? presetPasses[i] : pass);
      });
    }

    if (plugins.length > 0) {
      var _pass;

      (_pass = pass).unshift.apply(_pass, plugins);
    }

    var options = Object.assign({}, result.options);
    delete options.extends;
    delete options.env;
    delete options.plugins;
    delete options.presets;
    delete options.passPerPreset;

    if (options.sourceMap) {
      options.sourceMaps = options.sourceMap;
      delete options.sourceMap;
    }

    (0, _merge.default)(this.options, options);
  };

  _proto.init = function init(inputOpts) {
    var args = (0, _options.validate)("arguments", inputOpts);
    var configChain = (0, _buildConfigChain.default)(args);
    if (!configChain) return null;

    try {
      for (var _iterator = configChain, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var _config = _ref;
        this.mergeOptions(_config);
      }
    } catch (e) {
      if (!/^\[BABEL\]/.test(e.message)) {
        e.message = "[BABEL] " + (args.filename || "unknown") + ": " + e.message;
      }

      throw e;
    }

    var opts = (0, _merge.default)(createInitialOptions(), this.options);
    opts.plugins = this.passes[0];
    opts.presets = this.passes.slice(1).filter(function (plugins) {
      return plugins.length > 0;
    }).map(function (plugins) {
      return {
        plugins: plugins
      };
    });
    opts.passPerPreset = opts.presets.length > 0;

    if (opts.inputSourceMap) {
      opts.sourceMaps = true;
    }

    if (opts.moduleId) {
      opts.moduleIds = true;
    }

    (0, _defaults.default)(opts, {
      moduleRoot: opts.sourceRoot
    });
    (0, _defaults.default)(opts, {
      sourceRoot: opts.moduleRoot
    });
    (0, _defaults.default)(opts, {
      filenameRelative: opts.filename
    });

    var basenameRelative = _path.default.basename(opts.filenameRelative);

    if (_path.default.extname(opts.filenameRelative) === ".mjs") {
      opts.sourceType = "module";
    }

    (0, _defaults.default)(opts, {
      sourceFileName: basenameRelative,
      sourceMapTarget: basenameRelative
    });
    return {
      options: opts,
      passes: this.passes
    };
  };

  return OptionManager;
}();

var loadConfig = (0, _caching.makeWeakCache)(function (config) {
  var options = normalizeOptions(config);
  var plugins = (config.options.plugins || []).map(function (plugin, index) {
    return createDescriptor(plugin, _files.loadPlugin, config.dirname, {
      index: index,
      alias: config.alias
    });
  });
  var presets = (config.options.presets || []).map(function (preset, index) {
    return createDescriptor(preset, _files.loadPreset, config.dirname, {
      index: index,
      alias: config.alias
    });
  });
  return {
    options: options,
    plugins: plugins,
    presets: presets
  };
});
var loadDescriptor = (0, _caching.makeWeakCache)(function (_ref2, cache) {
  var value = _ref2.value,
      _ref2$options = _ref2.options,
      options = _ref2$options === void 0 ? {} : _ref2$options,
      dirname = _ref2.dirname,
      alias = _ref2.alias;
  var item = value;

  if (typeof value === "function") {
    var api = Object.assign(Object.create(context), {
      cache: cache,
      env: function env() {
        return cache.using(function () {
          return (0, _environment.getEnv)();
        });
      }
    });

    try {
      item = value(api, options, dirname);
    } catch (e) {
      if (alias) {
        e.message += " (While processing: " + JSON.stringify(alias) + ")";
      }

      throw e;
    }
  }

  if (!item || typeof item !== "object") {
    throw new Error("Plugin/Preset did not return an object.");
  }

  return {
    value: item,
    options: options,
    dirname: dirname,
    alias: alias
  };
});

function loadPluginDescriptor(descriptor) {
  if (descriptor.value instanceof _plugin.default) {
    if (descriptor.options) {
      throw new Error("Passed options to an existing Plugin instance will not work.");
    }

    return descriptor.value;
  }

  return instantiatePlugin(loadDescriptor(descriptor));
}

var instantiatePlugin = (0, _caching.makeWeakCache)(function (_ref3, cache) {
  var pluginObj = _ref3.value,
      options = _ref3.options,
      dirname = _ref3.dirname,
      alias = _ref3.alias;
  Object.keys(pluginObj).forEach(function (key) {
    if (!ALLOWED_PLUGIN_KEYS.has(key)) {
      throw new Error("Plugin " + alias + " provided an invalid property of " + key);
    }
  });

  if (pluginObj.visitor && (pluginObj.visitor.enter || pluginObj.visitor.exit)) {
    throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. " + "Please target individual nodes.");
  }

  var plugin = Object.assign({}, pluginObj, {
    visitor: (0, _clone.default)(pluginObj.visitor || {})
  });

  _traverse.default.explode(plugin.visitor);

  var inheritsDescriptor;
  var inherits;

  if (plugin.inherits) {
    inheritsDescriptor = {
      alias: alias + "$inherits",
      value: plugin.inherits,
      options: options,
      dirname: dirname
    };
    inherits = cache.invalidate(function () {
      return loadPluginDescriptor(inheritsDescriptor);
    });
    plugin.pre = chain(inherits.pre, plugin.pre);
    plugin.post = chain(inherits.post, plugin.post);
    plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);
    plugin.visitor = _traverse.default.visitors.merge([inherits.visitor, plugin.visitor]);
  }

  return new _plugin.default(plugin, options, alias);
});

var loadPresetDescriptor = function loadPresetDescriptor(descriptor) {
  return instantiatePreset(loadDescriptor(descriptor));
};

var instantiatePreset = (0, _caching.makeWeakCache)(function (_ref4) {
  var value = _ref4.value,
      dirname = _ref4.dirname,
      alias = _ref4.alias;
  return {
    type: "preset",
    options: (0, _options.validate)("preset", value),
    alias: alias,
    dirname: dirname
  };
});

function normalizeOptions(config) {
  var options = Object.assign({}, config.options);

  if (options.parserOpts && typeof options.parserOpts.parser === "string") {
    options.parserOpts = Object.assign({}, options.parserOpts);
    options.parserOpts.parser = (0, _files.loadParser)(options.parserOpts.parser, config.dirname).value;
  }

  if (options.generatorOpts && typeof options.generatorOpts.generator === "string") {
    options.generatorOpts = Object.assign({}, options.generatorOpts);
    options.generatorOpts.generator = (0, _files.loadGenerator)(options.generatorOpts.generator, config.dirname).value;
  }

  return options;
}

function createDescriptor(pair, resolver, dirname, _ref5) {
  var index = _ref5.index,
      alias = _ref5.alias;
  var options;
  var value = pair;

  if (Array.isArray(value)) {
    var _value = value;
    value = _value[0];
    options = _value[1];
  }

  var filepath = null;

  if (typeof value === "string") {
    var _resolver = resolver(value, dirname);

    filepath = _resolver.filepath;
    value = _resolver.value;
  }

  if (!value) {
    throw new Error("Unexpected falsy value: " + String(value));
  }

  if (typeof value === "object" && value.__esModule) {
    if (value.default) {
      value = value.default;
    } else {
      throw new Error("Must export a default export when using ES6 modules.");
    }
  }

  if (typeof value !== "object" && typeof value !== "function") {
    throw new Error("Unsupported format: " + typeof value + ". Expected an object or a function.");
  }

  if (filepath !== null && typeof value === "object" && value) {
    throw new Error("Plugin/Preset files are not allowed to export objects, only functions.");
  }

  if (options != null && typeof options !== "object") {
    throw new Error("Plugin/Preset options must be an object, null, or undefined");
  }

  options = options || undefined;
  return {
    alias: filepath || alias + "$" + index,
    value: value,
    options: options,
    dirname: dirname
  };
}

function chain(a, b) {
  var fns = [a, b].filter(Boolean);
  if (fns.length <= 1) return fns[0];
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    for (var _iterator2 = fns, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref6 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref6 = _i2.value;
      }

      var _fn = _ref6;

      _fn.apply(this, args);
    }
  };
}

function createInitialOptions() {
  return {
    sourceType: "module",
    babelrc: true,
    filename: "unknown",
    code: true,
    ast: true,
    comments: true,
    compact: "auto",
    highlightCode: true
  };
}